# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# SMGv2 test properties
# ----------------------------------------------------------------------


# cpa.pointer2.merge = SEP

# cpa                     = cpa.smg2.SMGCPA
cpa                     = cpa.arg.ARGCPA
ARGCPA.cpa              = cpa.composite.CompositeCPA
CompositeCPA.cpas       = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.smg2.SMGCPA

specification = specification/memorysafety.spc

cpa.smg2.memoryErrors = true
cpa.smg2.enableMallocFail = false
cpa.smg2.unknownOnUndefined = false
cpa.smg2.handleUnknownFunctions = strict
cpa.smg2.runtimeCheck = FULL

# Random waitlist in order to find violations faster
# analysis.traversal.order = RAND
# analysis.traversal.usePostorder = true

# analysis.summaryEdges       = true
# cpa.callstack.skipRecursion = true

# memorysafety.config = smg.properties
# memorycleanup.config = smg.properties

# simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# include includes/resource-limits.properties

# analysis.algorithm.CEGAR               = true
# cegar.refiner                          = cpa.value.refiner.ValueAnalysisRefiner

# precision.sharing                      = SCOPE

# [cpa.value.refinement]
# restart           = ROOT
# prefixPreference = DOMAIN_MIN,WIDTH_MIN,LENGTH_MIN

# [cpa.value.interpolation]
# applyItpEqualityOptimization = false
# applyRenamingOptimization    = false
# applyUnsatSuffixOptimization = false

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = true

# BFS has shown to be a good traversal strategy for value analysis,
# so we use this by default
# [analysis.traversal]
# order = bfs
# useReversePostorder = false
# useCallstack = false

